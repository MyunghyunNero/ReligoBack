name: deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push a Main Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: jungminleeee/religo-back:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max,scope=build-main
      - name: Build and Push a Logstash Docker Image
        uses: docker/build-push-action@v3
        with:
          context: logstash
          platforms: linux/amd64,linux/arm64
          push: true
          tags: jungminleeee/religo-back-logstash:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max,scope=build-logstash
      - name: Make Production Env
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_RELIGO_DB_HOSTNAME: ${{ secrets.RELIGO_DB_HOSTNAME }}
          envkey_RELIGO_DB_PORT: ${{ secrets.RELIGO_DB_PORT }}
          envkey_RELIGO_DB_SCHEMA: ${{ secrets.RELIGO_DB_SCHEMA }}
          envkey_RELIGO_DB_USERNAME: ${{ secrets.RELIGO_DB_USERNAME }}
          envkey_RELIGO_DB_PASSWORD: ${{ secrets.RELIGO_DB_PASSWORD }}
          envkey_RELIGO_JWT_SECRET: ${{ secrets.RELIGO_JWT_SECRET }}
          envkey_RELIGO_BUCKET: ${{ secrets.RELIGO_BUCKET }}
          envkey_RELIGO_ACCESS_KEY: ${{ secrets.RELIGO_ACCESS_KEY }}
          envkey_RELIGO_SECRET_KEY: ${{ secrets.RELIGO_SECRET_KEY }}
          envkey_RELIGO_ELASTICSEARCH_HOST: ${{ secrets.RELIGO_ELASTICSEARCH_HOST }}
          envkey_RELIGO_ELASTICSEARCH_USER: ${{ secrets.RELIGO_ELASTICSEARCH_USER }}
          envkey_RELIGO_ELASTICSEARCH_PASSWORD: ${{ secrets.RELIGO_ELASTICSEARCH_PASSWORD }}
          file_name: .env.production
          fail_on_empty: true
      - name: Setup Docker Compose Production Configuration
        run: |
          mkdir .deploy
          cp .env.production docker-compose-production.yml .deploy/
      - name: Deploy Main Docker Compose Production Configuration
        uses: easingthemes/ssh-deploy@v2
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_SSH_HOST }}
          REMOTE_PORT: ${{ secrets.REMOTE_SSH_PORT }}
          REMOTE_USER: ${{ secrets.REMOTE_SSH_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.REMOTE_SSH_KEY }}
          SOURCE: .deploy/
          ARGS: -avz --delete
          TARGET: ${{ secrets.REMOTE_TARGET }}
      - name: Deploy Logstash Docker Compose Production Configuration
        uses: easingthemes/ssh-deploy@v2
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_SSH_HOST_LOGSTASH }}
          REMOTE_PORT: ${{ secrets.REMOTE_SSH_PORT_LOGSTASH }}
          REMOTE_USER: ${{ secrets.REMOTE_SSH_USERNAME_LOGSTASH }}
          SSH_PRIVATE_KEY: ${{ secrets.REMOTE_SSH_KEY_LOGSTASH }}
          SOURCE: .deploy/
          ARGS: -avz --delete
          TARGET: ${{ secrets.REMOTE_TARGET_LOGSTASH }}
      - name: Run Main Docker
        uses: appleboy/ssh-action@master
        env:
          TARGET: ${{ secrets.REMOTE_TARGET }}
        with:
          host: ${{ secrets.REMOTE_SSH_HOST }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          username: ${{ secrets.REMOTE_SSH_USERNAME }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          envs: TARGET
          script_stop: true
          script: |
            cd $TARGET
            docker compose -f docker-compose-production.yml pull
            docker compose -f docker-compose-production.yml up -d religo
            docker image prune -af
      - name: Run Logstash Docker
        uses: appleboy/ssh-action@master
        env:
          TARGET: ${{ secrets.REMOTE_TARGET_LOGSTASH }}
        with:
          host: ${{ secrets.REMOTE_SSH_HOST_LOGSTASH }}
          port: ${{ secrets.REMOTE_SSH_PORT_LOGSTASH }}
          username: ${{ secrets.REMOTE_SSH_USERNAME_LOGSTASH }}
          key: ${{ secrets.REMOTE_SSH_KEY_LOGSTASH }}
          envs: TARGET
          script_stop: true
          script: |
            cd $TARGET
            docker compose -f docker-compose-production.yml pull
            docker compose -f docker-compose-production.yml up -d logstash
            docker image prune -af
