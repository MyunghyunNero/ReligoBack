spring:
  main:
    allow-circular-references: true

  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  profiles:
    include: oauth

  config:
    import:
      - optional:application-aws.yml

  jpa:
    open-in-view: true # 영속성 컨텍스트가 view까지 유지된다
    hibernate:
      ddl-auto: update # 서버 실행 시 주어진 엔티티 구조에 따라서 DB를 변경한다
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl # 코드에서 사용한 필드명 그대로 DB에 저장한다
      use-new-id-generator-mappings: false # 기본키 생성 전략이 AUTO인 경우 IDENTITY 전략을 따라간다
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true
    database: mysql

  datasource:
    url: jdbc:mysql://${env.RELIGO_DB_HOSTNAME}:${env.RELIGO_DB_PORT}/${env.RELIGO_DB_SCHEMA}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${env.RELIGO_DB_USERNAME}
    password: ${env.RELIGO_DB_PASSWORD}

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

cloud:
  aws:
    credentials:
      access-key: ${env.RELIGO_ACCESS_KEY}
      secret-key: ${env.RELIGO_SECRET_KEY}
    s3:
      bucket: ${env.RELIGO_BUCKET}
    region:
      static: ap-northeast-2
    stack:
      auto: false

server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      force: true
      charset: UTF-8
      enabled: true

logging:
  level:
    org.springframework:
      data:
        elasticsearch:
          client:
            WIRE: trace
    org.hibernate:
      SQL: debug
      type: trace
    com.amazonaws:
      util:
        EC2MetadataUtils: error

jwt:
  secret: ${env.RELIGO_JWT_SECRET}

elasticsearch:
  host: ${env.RELIGO_ELASTICSEARCH_HOST}
  user: ${env.RELIGO_ELASTICSEARCH_USER}
  password: ${env.RELIGO_ELASTICSEARCH_PASSWORD}
